	title  'CP/M-86 Loader'

INCLUDE	platform.equ
INCLUDE	cpm3.equ

	cseg

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

_entry:
	mov	ax, cs
	mov	ds, ax
	mov	ss, ax
	mov	sp, offset(stacktop)
	mov	ax, seg_bios
	mov	es, ax
	mov	dl, es:machinetype
	mov	bx, es:ramsize
	mov	unusedramtopseg, bx
	les	di, es:disklabelptr
	mov	ax, es:CNF_FONT_sec[di]
	or	ax, ax
	jz	loadkeys
	mov	sector,	ax
	cmp	dl, 0		; if machine type is Xi
	jz	xifont
	add	sector,	10h
	mov	sec_n, 9
	sub	bx, 120h
	mov	bufseg,	bx
	jmp	loadfont

xifont:
	mov	bufseg,	80h
	mov	sec_n, 10h

loadfont:
	call	read_disk
	or	ax, ax
	jnz	loadkeys
	xor	ax, ax
	mov	es, ax
	mov	es:afontptroff,	ax
	mov	es:mfontptroff,	ax
	mov	ax, bufseg
	mov	es:afontptrseg,	ax
	mov	es:mfontptrseg,	ax
	mov	unusedramtopseg, bx

loadkeys:
	xor	ax, ax
	mov	es, ax
	mov	bx, unusedramtopseg
	les	di, es:disklabelptr
	mov	ax, es:CNF_KEYS_sec[di]
	or	ax, ax
	jz	loadcpmhead
	mov	sector,	ax
	mov	sec_n, 2
	sub	bx, 40h		; 2 sectors from the end of RAM
	mov	bufseg,	bx
	call	read_disk
	or	ax, ax
	jnz	loadcpmhead
	xor	ax, ax
	mov	es, ax
	mov	es:keytabptroff, ax
	mov	es:keytabptrseg, bx
	mov	unusedramtopseg, bx

loadcpmhead:
	xor	ax, ax
	mov	es, ax
	les	di, es:disklabelptr
	mov	ax, es:CNF_DOS_sec[di]
	mov	sector,	ax
	mov	bufseg,	seg_cpmhead
	mov	sec_n, 1
	call	read_disk
	or	ax, ax
	jz	$+2
	xor	ax, ax
	mov	es, ax
	les	di, es:disklabelptr
	mov	ax, es:CNF_DOS_sec[di]
	mov	sector,	ax
	mov	bufseg,	seg_cpmhead
	mov	ax, seg_cpmhead
	mov	es, ax
	mov	ax, es:cpmcodesize
	add	ax, es:cpmdatasize
	shr	ax, 1
	shr	ax, 1
	shr	ax, 1
	shr	ax, 1
	shr	ax, 1
	inc	ax
	inc	ax
	mov	sec_n, ax
	call	read_disk
	or	ax, ax
	jz	$+2		; delay	after reading the disk
	mov	si, seg_cpmcode
	cmp	sec_n, 80h
	jb	fillfdds	; si=0C18h if CPM3.SYS > 80 sectors
	mov	si, seg_cpmalt

fillfdds:
	mov	ax, seg_cpmcode
	mov	es, ax
	mov	ax, es:cpmdataseg2
	mov	ds, ax
	xor	ax, ax
	mov	es, ax
	mov	ax, es:n_flphdd
	test	al, al		; if no	floppies
	jz	fillhdds
	mov	bx, 4[si]
	push	ax
	call	ram1
	call	ram2
	pop	ax
	cmp	al, 1
	jz	fillhdds
	mov	bx, 6[si]
	call	ram2

fillhdds:
	mov	ax, es:n_flphdd
	test	ah, ah		; if no	hdds
	jz	setfdd2
	push	ax
	mov	bx, [si]
	call	ram1
	call	ram2
	mov	ax, 0Eh[bx]
	mov	bx, 4[si]
	mov	0Eh[bx], ax
	mov	bx, 6[si]
	mov	0Eh[bx], ax
	pop	ax
	cmp	ah, 1
	jz	setfdd2
	mov	bx, 2[si]
	call	ram2

setfdd2:
	mov	ax, es:n_flphdd
	cmp	al, 2		; 2 or more floppies
	jnb	setfdd1
	mov	word ptr 6[si], 0

setfdd1:
	cmp	al, 1		; 1 or more floppies
	jnb	sethdd2
	mov	word ptr 4[si], 0

sethdd2:
	cmp	ah, 2		; 2 or more hdds
	jnb	sethdd1
	mov	cx, 4[si]
	mov	2[si],	cx
	mov	cx, 6[si]
	mov	4[si],	cx
	mov	word ptr 6[si], 0

sethdd1:
	cmp	ah, 1		; 1 or more hdds
	jnb	setmem1
	mov	cx, 2[si]
	mov	[si], cx
	mov	cx, 4[si]
	mov	2[si],	cx
	mov	word ptr 4[si], 0

; ───────────────────────────────────────────────────────────────────────────
setmem1:
	cmp	cs:sec_n, 80h
	jnb	setmem2
	mov	si, 0F56h	; if CPM3.SYS <	80s
	xor	ax, ax
	mov	es, ax
	mov	cx, 7
	cmp	es:usercodearea, 500h
	jnz	loc_3E25B
	dec	cx
	add	si, 6
	jmp	loc_3E26C

loc_3E25B:
	mov	ax, 6[si]
	mov	[si], ax
	mov	ax, 8[si]
	mov	2[si],	ax
	mov	ax, 0Ah[si]
	mov	4[si],	ax

loc_3E26C:		
	mov	ax, cs:unusedramtopseg
	sub	ax, [si]
	mov	2[si],	ax
	add	si, 6

loc_3E278:
	mov	word ptr [si], 0
	mov	word ptr 2[si], 0
	mov	byte ptr 4[si], 0FFh
	add	si, 6
	loop	loc_3E278
	jmp	boot
; ───────────────────────────────────────────────────────────────────────────

setmem2:
	xor	ax, ax		; if CPM3.SYS >= 80s
	mov	es, ax
	mov	cx, cs:unusedramtopseg
	mov	dx, es:usercodearea
	mov	bx, 5Ah

loc_3E29E:
	mov	si, bx
	mov	bx, [bx]
	test	bx, bx
	jz	loc_3E2AB
	cmp	dx, 2[bx]
	ja	loc_3E29E

loc_3E2AB:
	cmp	word_1799A, bx
	jz	loc_3E2BA
	mov	ax, word_17998
	mov	word_17998, bx
	mov	[si], ax

loc_3E2BA:
	mov	bx, 5Ah

loc_3E2BD:
	mov	si, bx
	mov	bx, [bx]
	test	bx, bx
	jz	boot
	mov	ax, 2[bx]
	add	ax, 4[bx]
	cmp	ax, cx
	jbe	loc_3E2BD
	mov	word ptr [si], 0
	mov	si, bx

loc_3E2D5:
	mov	di, bx
	mov	bx, [bx]
	test	bx, bx
	jnz	loc_3E2D5
	mov	ax, word_17998
	mov	word_17998, si
	mov	[di], ax

boot:	
	mov	ax, seg_cpmcode
	push	ax
	xor	ax, ax
	push	ax
	retf


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


ram2:
	push	si
	mov	dx, cs:unusedramtopseg
	sub	dx, 12h[bx]
	mov	12h[bx], dx
	mov	cs:unusedramtopseg, dx
	pop	si
	retn


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


ram1:
	push	si
	mov	si, 10h[bx]
	mov	si, [si]
	mov	dx, cs:unusedramtopseg

loc_3E30C:
	sub	dx, cpmdatasize[si]
	mov	cpmdatasize[si], dx
	mov	si, cpmdataseg[si]
	or	si, si
	jnz	loc_3E30C
	mov	cs:unusedramtopseg, dx
	pop	si
	retn


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


read_disk:
		push	bx
		push	cx
		push	es
		mov	bx, 39h		; DEV: FDD
		mov	cx, 0Bh		; COM: READ
		xor	ax, ax
		mov	es, ax
		mov	ax, es:bootfrom
		cmp	ax, 2		; if boot from id>=2, means hdd
		jb	loc_3E33F
		sub	ax, 2
		mov	bx, 40h		; DEV: HDD
		mov	cx, 5		; COM: READ

loc_3E33F:				;CODE XREF: read_disk+14↑j
		mov	word_17C10, ax
		mov	dx, ds
		mov	si, offset drive_no
		int	0FCh
		pop	es
		pop	cx
		pop	bx
		or	ax, ax
		retn

; ───────────────────────────────────────────────────────────────────────────

read_disk_rec:
drive_no	dw	0
		dw	0
sector		dw	0
sec_n		dw	0
		dw	0
bufseg		dw	0
unusedramtopseg	dw	0

	org	0f30h
	rw	32
stacktop:
	rw	32

	end
