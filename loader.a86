	title  'CP/M-86 Loader for Apricot F1'
	; LOADER   SYS      1408 1985-02-11  18:05
	; from http://actapricot.org/disks/aprid5ks.htm#apr00301.dsk
	; reverse-engineered by Atsuko Ito <me@yottatsa.name>

INCLUDE	platform.equ
INCLUDE	cpm.equ
INCLUDE	sys.equ

	cseg

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

_entry:
	mov	ax,		cs
	mov	ds,		ax
	mov	ss,		ax
	mov	sp,		offset(stacktop)
	mov	ax,		seg_bios
	mov	es,		ax
	mov	dl,		es:machinetype
	mov	bx,		es:ramsize
	mov	ds:ramtop,		bx
	les	di,		es:disklabelptr
	mov	ax,		es:CNF_FONT_sec[di]
	or	ax,		ax
	jz	loadkeys
	mov	ds:sector,	ax
	cmp	dl,		0		; if machine type is Xi
	jz	xifont
	add	ds:sector,	10h
	mov	ds:sec_n,	9
	sub	bx,		120h
	mov	ds:bufseg,	bx
	jmps	loadfont

xifont:
	mov	ds:bufseg,	80h
	mov	ds:sec_n,	10h

loadfont:
	call	read_disk
	or	ax,		ax
	jnz	loadkeys
	xor	ax,		ax
	mov	es,		ax
	mov	es:afontptroff,	ax
	mov	es:mfontptroff,	ax
	mov	ax,		ds:bufseg
	mov	es:afontptrseg,	ax
	mov	es:mfontptrseg,	ax
	mov	ds:ramtop,	bx

loadkeys:
	xor	ax,		ax
	mov	es,		ax
	mov	bx,		ds:ramtop
	les	di,		es:disklabelptr
	mov	ax,		es:CNF_KEYS_sec[di]
	or	ax,		ax
	jz	loadcpmhead
	mov	ds:sector,	ax
	mov	ds:sec_n,	2
	sub	bx,		40h		; 2 sectors from the end of RAM
	mov	ds:bufseg,	bx
	call	read_disk
	or	ax,		ax
	jnz	loadcpmhead
	xor	ax,		ax
	mov	es,		ax
	mov	es:keytabptroff, ax
	mov	es:keytabptrseg, bx
	mov	ds:ramtop,	bx

loadcpmhead:
	xor	ax,		ax
	mov	es,		ax
	les	di,		es:disklabelptr
	; assume es: disklabel structure
	mov	ax,		es:CNF_DOS_sec[di]
	mov	ds:sector,	ax
	mov	ds:bufseg,	seg_cpmhead
	mov	ds:sec_n,	1
	call	read_disk
	or	ax,		ax
	jz	$+2
	xor	ax,		ax
	mov	es,		ax
	les	di,		es:disklabelptr
	; assume es: disklabel structure
	mov	ax,		es:CNF_DOS_sec[di]
	mov	ds:sector,	ax
	mov	ds:bufseg,	seg_cpmhead
	mov	ax,		seg_cpmhead
	mov	es,		ax
	; assume es: cpm3.sys header
	mov	ax,		es:cpmcodesize
	add	ax,		es:cpmdatasize
	shr	ax,		1
	shr	ax,		1
	shr	ax,		1
	shr	ax,		1
	shr	ax,		1
	inc	ax
	inc	ax
	mov	ds:sec_n,	ax
	call	read_disk
	or	ax,		ax
	jz	$+2				; delay	after reading the disk
	mov	si,		seg_cpmcode
	cmp	ds:sec_n,	80h
	jb	fillfdds
	mov	si,		0C18h		; if CPM3.SYS > 80 sectors, not a case

fillfdds:
	mov	ax,		seg_cpmcode
	mov	es,		ax
	; assume es: cpm3.sys cseg
	mov	ax,		es:bdos_dseg
	mov	ds,		ax
	xor	ax,		ax
	mov	es,		ax
	mov	ax,		es:n_flphdd
	test	al,		al		; if no	floppies
	jz	fillhdds
	mov	bx,		4[si]
	push	ax
	call	ram1
	call	ram2
	pop	ax
	cmp	al,		1
	jz	fillhdds
	mov	bx,		6[si]
	call	ram2

fillhdds:
	mov	ax,		es:n_flphdd
	test	ah,		ah		; if no	hdds
	jz	setfdd2
	push	ax
	mov	bx,		[si]
	call	ram1
	call	ram2
	mov	ax,		0Eh[bx]
	mov	bx,		4[si]
	mov	0Eh[bx],	ax
	mov	bx,		6[si]
	mov	0Eh[bx],	ax
	pop	ax
	cmp	ah,		1
	jz	setfdd2
	mov	bx,		2[si]
	call	ram2

setfdd2:
	mov	ax,		es:n_flphdd
	cmp	al,		2		; 2 or more floppies
	jnb	setfdd1
	mov	word ptr 6[si],	0

setfdd1:
	cmp	al,		1		; 1 or more floppies
	jnb	sethdd2
	mov	word ptr 4[si],	0

sethdd2:
	cmp	ah,		2		; 2 or more hdds
	jnb	sethdd1
	mov	cx,		4[si]
	mov	2[si],	cx
	mov	cx,		6[si]
	mov	4[si],	cx
	mov	word ptr 6[si],	0

sethdd1:
	cmp	ah,		1		; 1 or more hdds
	jnb	setmem1
	mov	cx,		2[si]
	mov	[si],		cx
	mov	cx,		4[si]
	mov	2[si],		cx
	mov	word ptr 4[si],	0

; ───────────────────────────────────────────────────────────────────────────
setmem1:
	cmp	cs:sec_n,	80h
	jnb	setmem2
	mov	si,		0F56h		; if CPM3.SYS <	80s
	xor	ax,		ax
	mov	es,		ax
	mov	cx,		7
	cmp	es:usercodearea, 500h
	jnz	loc_3E25B
	dec	cx
	add	si,		6
	jmps	loc_3E26C

loc_3E25B:
	mov	ax,		6[si]
	mov	[si],		ax
	mov	ax,		8[si]
	mov	2[si],		ax
	mov	ax,		0Ah[si]
	mov	4[si],		ax

loc_3E26C:		
	mov	ax,		cs:ramtop
	sub	ax,		[si]
	mov	2[si],		ax
	add	si,		6

loc_3E278:
	mov	word ptr [si],	0
	mov	word ptr 2[si],	0
	mov	byte ptr 4[si],	0FFh
	add	si,		6
	loop	loc_3E278
	jmp	boot
; ───────────────────────────────────────────────────────────────────────────

setmem2:
	xor	ax,		ax		; if CPM3.SYS >= 80s
	mov	es,		ax
	mov	cx,		cs:ramtop
	mov	dx,		es:usercodearea
	mov	bx,		5Ah

loc_3E29E:
	mov	si,		bx
	mov	bx,		[bx]
	test	bx,		bx
	jz	loc_3E2AB
	cmp	dx,		2[bx]
	ja	loc_3E29E

loc_3E2AB:
	cmp	word_1799A,	bx
	jz	loc_3E2BA
	mov	ax,		word_17998
	mov	word_17998,	bx
	mov	[si],		ax

loc_3E2BA:
	mov	bx,		5Ah

loc_3E2BD:
	mov	si,		bx
	mov	bx,		[bx]
	test	bx,		bx
	jz	boot
	mov	ax,		2[bx]
	add	ax,		4[bx]
	cmp	ax,		cx
	jbe	loc_3E2BD
	mov	word ptr [si],	0
	mov	si,		bx

loc_3E2D5:
	mov	di,		bx
	mov	bx,		[bx]
	test	bx,		bx
	jnz	loc_3E2D5
	mov	ax,		word_17998
	mov	word_17998,	si
	mov	[di],		ax

boot:	
	mov	ax,		seg_cpmcode
	push	ax
	xor	ax,		ax
	push	ax
	retf


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


ram2:
	push	si
	mov	dx,		cs:ramtop
	sub	dx,		12h[bx]
	mov	12h[bx],	dx
	mov	cs:ramtop,	dx
	pop	si
	retn


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


ram1:
	push	si
	mov	si,		10h[bx]
	mov	si,		[si]
	mov	dx,		cs:ramtop

loc_3E30C:
	sub	dx,		cpmdatasize[si]
	mov	cpmdatasize[si], dx
	mov	si,		cpmdataseg[si]
	or	si,		si
	jnz	loc_3E30C
	mov	cs:ramtop,	dx
	pop	si
	retn


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


read_disk:
	push	bx
	push	cx
	push	es
	mov	bx,		39h		; DEV: FDD
	mov	cx,		0Bh		; COM: READ
	xor	ax,		ax
	mov	es,		ax
	mov	ax,		es:bootfrom
	cmp	ax,		2		; if boot from id>=2, means hdd
	jb	loc_3E33F
	sub	ax,		2
	mov	bx,		40h		; DEV: HDD
	mov	cx,		5		; COM: READ

loc_3E33F:
	mov	ds:word_17C10,	ax
	mov	dx,		ds
	mov	si,		offset(drv_no)
	int	0FCh
	pop	es
	pop	cx
	pop	bx
	or	ax,		ax
	retn

; ───────────────────────────────────────────────────────────────────────────

	org	02D0h
read_disk_rec:
drv_no	dw	0
	dw	0
sector	dw	0
sec_n	dw	0
	dw	0
bufseg	dw	0
ramtop	dw	0

	rw	80h
stacktop:

	end
